library(flexdashboard)
diamonds |>
ggplot(aes(carat)) +
geom_histogram(binwidth = 0.1)
library(ggplot2)
diamonds |>
ggplot(aes(carat)) +
geom_histogram(binwidth = 0.1)
library(dplyr)
diamonds %>%
arrange(desc(carat)) %>%
head(100) %>%
select(carat, cut, color, price) %>%
DT::datatable()
renderTable({
head(mtcars, n = input$rows)
})
library(shiny)
renderTable({
head(mtcars, n = input$rows)
})
library(flexdashboard)
library(ggplot2)
library(dplyr)
library(shiny)
diamonds %>%
arrange(desc(carat)) %>%
head(100) %>%
select(carat, cut, color, price) %>%
DT::datatable()
renderTable({
head(mtcars, n = input$rows)
})
?download.file
install.packages("DBI")
install.packages("RSQLite")
install.packages("dbplyr")
carriers <- flights_df |>
select(carrier) |>
distinct() |>
pull(carrier)
library(DBI)
conn <- dbConnect(RSQLite::SQLite(),
here("data", "nycflights13", "nycflights13.sqlite"))
library(here)
library(DBI)
conn <- dbConnect(RSQLite::SQLite(),
here("data", "nycflights13", "nycflights13.sqlite"))
library(nycflights13)
install.packages("nycflights13")
```{r setup, include=FALSE}
library(flexdashboard)
library(ggplot2)
library(dplyr)
library(shiny)
library(here)
combined_df <- readRDS(here("data", "combined_df.RDS"))
head(combined_df)
View(combined_df)
View(combined_df)
library(tidycensus)
library(tidyverse)
library(here)
library(forcats)
library(stringr)
census_api_key("87aa96dbd4a1bde9692cb9dae550af95b158b5d8",
overwrite = TRUE,
install = TRUE)
readRenviron("~/.Renviron")
Sys.getenv("CENSUS_API_KEY")
all_vars_acs5 <- load_variables(year = 2019,
dataset = "acs5")
# I want to see all of the possible variables to look at and so I grouped data by concept
all_vars_acs5$concept <- factor(all_vars_acs5$concept)
#levels(all_vars_acs5$concept) # there are about 1134 possible variables to look at
Arab_subset <- all_vars_acs5 %>%
filter(str_detect(label, "Arab") |
str_detect(label, "ARAB") |
str_detect(concept, "Arab") |
str_detect(concept, "ARAB"))
unique(Arab_subset$concept)
# I did this to see what variables exist that I can use
# I'm only interested in the variables related to total # of people
vars = Arab_subset$name[1:30]
# Years I want to get data from
years <- 2014:2019
# Subsetting data with above years
dfs_acs <- map(years, ~get_acs(geography = "state", variables = vars,
year = .x))
names(dfs_acs) <- paste0("df_acs_", years)
list2env(dfs_acs, envir = .GlobalEnv)
# My data is stored in a list, and I want to combine it into a single data frame
combined_df_all <- bind_cols(map(dfs_acs, ~select(.x, NAME, variable, estimate, moe)), .id = "year")
# combined_df_subset <- bind_cols(map(filtered_dfs, ~select(.x, NAME, variable, estimate, moe)), .id = "year")
# Renaming data
combined_df = combined_df_all %>%
rename("Variable" = "variable...2",
"State" = "NAME...1",
"2014_estimate" = "estimate...3",
"2014_moe" = "moe...4",
"2015_estimate" = "estimate...7",
"2015_moe" = "moe...8",
"2016_estimate" = "estimate...11",
"2016_moe" = "moe...12",
"2017_estimate" = "estimate...15",
"2017_moe" = "moe...16",
"2018_estimate" = "estimate...19",
"2018_moe" = "moe...20",
"2019_estimate" = "estimate...23",
"2019_moe" = "moe...24") %>%
select(-starts_with("variable.."), -starts_with("NAME"))
# Keeping track of all these variable names is hard so I am just going to append the dataframe that contains the variable names and labels to the dataframe
combined_df <- left_join(combined_df, Arab_subset,
by = c("Variable" = "name"))
# Define the recoding rules
unique(combined_df$concept)
recoding_rules <- c(
"single_ancestry" = "PEOPLE REPORTING SINGLE ANCESTRY",
"multi_ancestry" = "PEOPLE REPORTING MULTIPLE ANCESTRY",
"ancestry" = "PEOPLE REPORTING ANCESTRY")
combined_df=combined_df %>%
mutate(concept=fct_recode(concept,!!!recoding_rules),
label=str_remove(label, "Estimate!!Total:!!"),
label=str_remove(label, "Arab:!!"),
label=str_replace(label, "Arab:", "Arab")) %>%
pivot_longer(cols = ends_with("estimate") | ends_with("moe"),
names_to = c(".value", "Type"),
names_sep = "_") %>%
pivot_longer(cols = starts_with("201"),
names_to = "year",
values_to = "value")
saveRDS(df_acs, file=here("data","combined_df.RDS")
)
saveRDS(combined_df, file=here("data","combined_df.RDS")
)
combined_df <- readRDS(here("data", "combined_df.RDS"))
library(tidycensus)
library(tidyverse)
library(here)
library(forcats)
library(stringr)
census_api_key("87aa96dbd4a1bde9692cb9dae550af95b158b5d8",
overwrite = TRUE,
install = TRUE)
readRenviron("~/.Renviron")
Sys.getenv("CENSUS_API_KEY")
all_vars_acs5 <- load_variables(year = 2019,
dataset = "acs5")
# I want to see all of the possible variables to look at and so I grouped data by concept
all_vars_acs5$concept <- factor(all_vars_acs5$concept)
#levels(all_vars_acs5$concept) # there are about 1134 possible variables to look at
Arab_subset <- all_vars_acs5 %>%
filter(str_detect(label, "Arab") |
str_detect(label, "ARAB") |
str_detect(concept, "Arab") |
str_detect(concept, "ARAB"))
unique(Arab_subset$concept)
# I did this to see what variables exist that I can use
# I'm only interested in the variables related to total # of people
vars = Arab_subset$name[1:30]
# Years I want to get data from
years <- 2014:2019
# Subsetting data with above years
dfs_acs <- map(years, ~get_acs(geography = "state", variables = vars,
year = .x))
names(dfs_acs) <- paste0("df_acs_", years)
list2env(dfs_acs, envir = .GlobalEnv)
# My data is stored in a list, and I want to combine it into a single data frame
combined_df_all <- bind_cols(map(dfs_acs, ~select(.x, NAME, variable, estimate, moe)), .id = "year")
# combined_df_subset <- bind_cols(map(filtered_dfs, ~select(.x, NAME, variable, estimate, moe)), .id = "year")
# Renaming data
combined_df = combined_df_all %>%
rename("Variable" = "variable...2",
"State" = "NAME...1",
"2014_estimate" = "estimate...3",
"2014_moe" = "moe...4",
"2015_estimate" = "estimate...7",
"2015_moe" = "moe...8",
"2016_estimate" = "estimate...11",
"2016_moe" = "moe...12",
"2017_estimate" = "estimate...15",
"2017_moe" = "moe...16",
"2018_estimate" = "estimate...19",
"2018_moe" = "moe...20",
"2019_estimate" = "estimate...23",
"2019_moe" = "moe...24") %>%
select(-starts_with("variable.."), -starts_with("NAME"))
# Keeping track of all these variable names is hard so I am just going to append the dataframe that contains the variable names and labels to the dataframe
combined_df <- left_join(combined_df, Arab_subset,
by = c("Variable" = "name"))
# Define the recoding rules
unique(combined_df$concept)
recoding_rules <- c(
"single_ancestry" = "PEOPLE REPORTING SINGLE ANCESTRY",
"multi_ancestry" = "PEOPLE REPORTING MULTIPLE ANCESTRY",
"ancestry" = "PEOPLE REPORTING ANCESTRY")
combined_df=combined_df %>%
mutate(concept=fct_recode(concept,!!!recoding_rules),
label=str_remove(label, "Estimate!!Total:!!"),
label=str_remove(label, "Arab:!!"),
label=str_replace(label, "Arab:", "Arab")) %>%
pivot_longer(cols = ends_with("estimate") | ends_with("moe"),
names_to = c(".value", "Type"),
names_sep = "_") %>%
pivot_longer(cols = starts_with("201"),
names_to = "year",
values_to = "value")
here()
saveRDS(combined_df, file=here("data","combined_df.RDS")
)
combined_df
combined_df <- readRDS(here("data", "combined_df.RDS"))
combined_df <- readRDS(here("data", "combined_df.RDS"))
combined_df <- readRDS(here("data", "combined_df.RDS"))
here
here()
combined_df <- readRDS(here("data", "combined_df.RDS"))
View(combined_df)
table(combined_df$label)
levels(combined_df$label)
unique(combined_df$label)
unique(combined_df$year)
selectInput("variable", "Variable:",
c("Ethnicity" = "label",
"Year" = year))
library(stringr)
ui <- fluidPage(
selectInput("year", "Year:", unique(combined_df$year)),
selectInput("label", "Label:", unique(combined_df$label)),
plotOutput("plot")
)
server <- function(input, output) {
output$plot <- renderPlot({
filtered_data <- combined_df %>%
filter(Type == "estimate" & year == input$year & label == input$label & concept == "single_ancestry")
ggplot(filtered_data, aes(x = value, y = fct_reorder(State, value))) +
geom_bar(stat = "identity", fill = "blue", alpha = 0.7) +
labs(
title = "Bar Plot of Arab Population Estimates by State",
subtitle = str_wrap("As expected, there is a high density of Arabs in states with metropolitan cities"),
x = "Estimates of Arab Population per State",
y = "State"
) +
theme_minimal()
})
}
shinyApp(ui, server)
server <- function(input, output) {
output$plot <- renderPlot({
filtered_data <- combined_df %>%
filter(Type == "estimate" & year == input$year & label == input$label & concept == "single_ancestry")
ggplot(filtered_data, aes(x = value, y = fct_reorder(State, value))) +
geom_bar(stat = "identity", fill = "blue", alpha = 0.7) +
labs(
title = paste0("Bar Plot of ", input$label, "Population by State"),
x = paste0("Estimates of", input$label, "Population per State"),
y = "State"
) +
theme_minimal()
})
}
shinyApp(ui, server)
```{r}
ui <- fluidPage(
selectInput("year", "Year:", unique(combined_df$year)),
selectInput("label", "Label:", unique(combined_df$label)),
plotOutput("plot")
)
server <- function(input, output) {
output$plot <- renderPlot({
filtered_data <- combined_df %>%
filter(Type == "estimate" & year == input$year & label == input$label & concept == "single_ancestry")
ggplot(filtered_data, aes(x = value, y = fct_reorder(State, value))) +
geom_bar(stat = "identity", fill = "blue", alpha = 0.7) +
labs(
title = paste0("Bar Plot of ", input$label, " Population by State in ", input$year),
x = paste0("Estimates of", input$label, " Population per State in ", input$year),
y = "State"
) +
theme_minimal()
})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("year", "Year:", unique(combined_df$year)),
selectInput("label", "Label:", unique(combined_df$label)),
plotOutput("plot")
)
server <- function(input, output) {
output$plot <- renderPlot({
filtered_data <- combined_df %>%
filter(Type == "estimate" & year == input$year & label == input$label & concept == "single_ancestry")
ggplot(filtered_data, aes(x = value, y = fct_reorder(State, value))) +
geom_bar(stat = "identity", fill = "blue", alpha = 0.7) +
labs(
title = paste0("Bar Plot of ", input$label, " Population by State in ", input$year),
x = paste0("Estimates of", input$label, " Population per State in ", input$year),
y = "State"
) +
theme_minimal()
})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("year", "Year:", unique(combined_df$year)),
selectInput("label", "Label:", unique(combined_df$label)),
plotOutput("plot")
)
server <- function(input, output) {
output$plot <- renderPlot({
filtered_data <- combined_df %>%
filter(Type == "estimate" & year == input$year & label == input$label & concept == "single_ancestry")
ggplot(filtered_data, aes(x = value, y = fct_reorder(State, value))) +
geom_bar(stat = "identity", fill = "blue", alpha = 0.7) +
labs(
title = paste0("Bar Plot of ", input$label, " Population by State in ", input$year),
x = paste0("Estimates of", input$label, " Population per State in ", input$year),
y = "State"
) +
theme_minimal()
})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("year", "Year:", unique(combined_df$year)),
selectInput("label", "Label:", unique(combined_df$label)),
plotOutput("plot")
)
server <- function(input, output) {
output$plot <- renderPlot({
filtered_data <- combined_df %>%
filter(Type == "estimate" & year == input$year & label == input$label & concept == "single_ancestry")
ggplot(filtered_data, aes(x = value, y = fct_reorder(State, value))) +
geom_bar(stat = "identity", fill = "blue", alpha = 0.7) +
labs(
title = paste0("Bar Plot of ", input$label, " Population by State in ", input$year),
x = paste0("Estimates of", input$label, " Population per State in ", input$year),
y = "State"
) +
theme_minimal()
})
}
shinyApp(ui, server)
server <- function(input, output) {
server <- function(input, output) {
output$plot <- renderPlot({
filtered_data <- combined_df %>%
filter(Type=="estimate" &
concept=="single_ancestry" &
State == input$State,
year == input$year,
!(Variable %in% c("B04004_006", "B04004_014"))
server <- function(input, output) {
filtered_data <- combined_df %>%
filter(Type=="estimate" &
concept=="single_ancestry" &
State == input$State,
year == input$year,
!(Variable %in% c("B04004_006", "B04004_014")))
ui <- fluidPage(
selectInput("year", "Year:", unique(combined_df$year)),
selectInput("state", "State:", unique(combined_df$State)),
plotOutput("plot")
)
filtered_data <- combined_df %>%
filter(Type=="estimate" &
concept=="single_ancestry" &
State == input$State,
year == input$year,
!(Variable %in% c("B04004_006", "B04004_014"))
filtered_data <- combined_df %>%
ui <- fluidPage(
selectInput("year", "Year:", unique(combined_df$year)),
selectInput("state", "State:", unique(combined_df$State)),
plotOutput("plot")
)
server <- function(input, output) {
output$plot <- renderPlot({
filtered_data <- combined_df %>%
filter(Type == "estimate" &
concept == "single_ancestry" &
State == input$state,  # Change from input$State to input$state
year == input$year,
!(Variable %in% c("B04004_006", "B04004_014")))
ggplot(filtered_data, aes(x = value, y = fct_reorder(State, value))) +
geom_bar(stat = "identity", fill = "blue", alpha = 0.7) +
labs(
title = paste0("Bar Plot of Arab Population by State in ", input$year),
x = paste0("Estimates of Arab Population per State in ", input$year),
y = "State"
) +
theme_minimal()
})
}
total_Arab_summary_diff_time %>%
mutate(label = fct_reorder(label, value, sum)) %>%
ggplot(aes(x = label, y = value, fill = label)) +
geom_col(alpha = 0.8) +
labs(
title = paste0("Stacked Bar Plot of Arab Population Estimates in ", input$state),  # Change from input$State to input$state
x = "Country of National Origin",
y = "# of People (Counts)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = c("#8C564B", "#D8BFD8", "#BC8F8F", "#F4A460", "#556B2F", "#A0522D", "#BDB76B", "#CD853F"))
filtered_data %>%
mutate(label = fct_reorder(label, value, sum)) %>%
ggplot(aes(x = label, y = value, fill = label)) +
geom_col(alpha = 0.8) +
labs(
title = paste0("Stacked Bar Plot of Arab Population Estimates in ", input$state),  # Change from input$State to input$state
x = "Country of National Origin",
y = "# of People (Counts)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = c("#8C564B", "#D8BFD8", "#BC8F8F", "#F4A460", "#556B2F", "#A0522D", "#BDB76B", "#CD853F"))
ui <- fluidPage(
selectInput("year", "Year:", unique(combined_df$year)),
selectInput("label", "Label:", unique(combined_df$label)),
plotOutput("plot")
)
server <- function(input, output) {
output$plot <- renderPlot({
filtered_data <- combined_df %>%
filter(Type == "estimate" & year == input$year & label == input$label & concept == "single_ancestry")
ggplot(filtered_data, aes(x = value, y = fct_reorder(State, value))) +
geom_bar(stat = "identity", fill = "blue", alpha = 0.7) +
labs(
title = paste0("Bar Plot of ", input$label, " Population by State in ", input$year),
x = paste0("Estimates of", input$label, " Population per State in ", input$year),
y = "State"
) +
theme_minimal()
})
}
shinyApp(ui, server)
unique(combined_df$label)
renderPlot({
filtered_data = combined_df %>%
filter(Type=="estimate" &
year == input$year &
label == input$label &
concept == "single_ancestry")
ggplot(filtered_data, aes(x = value,
y=fct_reorder(State, value))) +
geom_bar(state = "identity", fill="blue", alpha=0.7) +
labs(
title = paste0("Bar Plot of ", input$label,
" Population by State in ", input$year),
x = paste0("Estimates of ", input$label,
" Population per State in ", input$year),
y = "State") +
theme_minimal()
})
selectInput("year", "Year:", unique(combined_df$year))
selectInput("label", "Label:", unique(combined_df$label))
renderPlot({
filtered_data = combined_df %>%
filter(Type=="estimate" &
year == input$year &
label == input$label &
concept == "single_ancestry")
ggplot(filtered_data, aes(x = value,
y=fct_reorder(State, value))) +
geom_bar(state = "identity", fill="blue", alpha=0.7) +
labs(
title = paste0("Bar Plot of ", input$label,
" Population by State in ", input$year),
x = paste0("Estimates of ", input$label,
" Population per State in ", input$year),
y = "State") +
theme_minimal()
})
str(combined_df)
